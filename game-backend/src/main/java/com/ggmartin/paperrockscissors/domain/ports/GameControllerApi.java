/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ggmartin.paperrockscissors.domain.ports;

import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ggmartin.paperrockscissors.domain.models.GameDTO;
import com.ggmartin.paperrockscissors.domain.models.HandTypeDTO;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-08-25T18:03:32.705760100+02:00[Europe/Madrid]")

@Api(value = "GameController", description = "the GameController API")
public interface GameControllerApi {

	Logger log = LoggerFactory.getLogger(GameControllerApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}


    @ApiOperation(value = "Clean a game", nickname = "cleanGame", notes = "Clean a game", response = GameDTO.class, tags={ "GameController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game cleaned.", response = GameDTO.class),
        @ApiResponse(code = 400, message = "Inconsisten data."),
        @ApiResponse(code = 404, message = "Game with this id didnt exist."),
        @ApiResponse(code = 500, message = "Internal Server Error.") })
    @RequestMapping(value = "/game/{id}/clean",	
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<GameDTO> cleanGame(@ApiParam(value = "Id of the game",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Continue a game", nickname = "continueGame", notes = "Continue a game", response = GameDTO.class, tags={ "GameController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game started.", response = GameDTO.class),
        @ApiResponse(code = 400, message = "Inconsisten data."),
        @ApiResponse(code = 404, message = "Game with this id didnt exist."),
        @ApiResponse(code = 500, message = "Internal Server Error.") })
    @RequestMapping(value = "/game/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<GameDTO> continueGame(@ApiParam(value = "Id of the game",required=true) @PathVariable("id") Integer id,@NotNull @ApiParam(value = "id Hand", required = true) @Valid @RequestParam(value = "player1HandId", required = true) Integer player1HandId,@NotNull @ApiParam(value = "id Hand", required = true) @Valid @RequestParam(value = "player2HandId", required = true) Integer player2HandId);


    @ApiOperation(value = "Create a new game", nickname = "createGame", notes = "Create a new game", response = GameDTO.class, tags={ "GameController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game started.", response = GameDTO.class),
        @ApiResponse(code = 400, message = "Inconsisten data."),
        @ApiResponse(code = 500, message = "Internal Server Error.") })
    @RequestMapping(value = "/game",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<GameDTO> createGame(@NotNull @ApiParam(value = "id Hand", required = true) @Valid @RequestParam(value = "player1HandId", required = true) Integer player1HandId,@NotNull @ApiParam(value = "id Hand", required = true) @Valid @RequestParam(value = "player2HandId", required = true) Integer player2HandId);


    @ApiOperation(value = "Catalog of types of hands", nickname = "getHandTypes", notes = "Catalog of types of hands", response = HandTypeDTO.class, responseContainer = "List", tags={ "GameController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Catalog data.", response = HandTypeDTO.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error.") })
    @RequestMapping(value = "/game/catalogTypes",
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<HandTypeDTO>> getHandTypes();

}
