/*
 * Rock Paper Scissors
 * This is a practice with swagger
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ggmartin.paperrockscissors.client.api;

import com.ggmartin.paperrockscissors.client.ApiCallback;
import com.ggmartin.paperrockscissors.client.ApiClient;
import com.ggmartin.paperrockscissors.client.ApiException;
import com.ggmartin.paperrockscissors.client.ApiResponse;
import com.ggmartin.paperrockscissors.client.Configuration;
import com.ggmartin.paperrockscissors.client.Pair;
import com.ggmartin.paperrockscissors.client.ProgressRequestBody;
import com.ggmartin.paperrockscissors.client.ProgressResponseBody;
import com.ggmartin.paperrockscissors.client.model.GameDTO;
import com.ggmartin.paperrockscissors.client.model.HandTypeDTO;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GameControllerApi {
    private ApiClient apiClient;

    public GameControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GameControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cleanGame
     * @param id Id of the game (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cleanGameCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/game/{id}/clean"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cleanGameValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cleanGame(Async)");
        }
        

        com.squareup.okhttp.Call call = cleanGameCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clean a game
     * Clean a game
     * @param id Id of the game (required)
     * @return GameDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GameDTO cleanGame(Integer id) throws ApiException {
        ApiResponse<GameDTO> resp = cleanGameWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Clean a game
     * Clean a game
     * @param id Id of the game (required)
     * @return ApiResponse&lt;GameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GameDTO> cleanGameWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = cleanGameValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean a game (asynchronously)
     * Clean a game
     * @param id Id of the game (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cleanGameAsync(Integer id, final ApiCallback<GameDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cleanGameValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for continueGame
     * @param id Id of the game (required)
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call continueGameCall(Integer id, Integer player1HandId, Integer player2HandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/game/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (player1HandId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("player1HandId", player1HandId));
        if (player2HandId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("player2HandId", player2HandId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call continueGameValidateBeforeCall(Integer id, Integer player1HandId, Integer player2HandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling continueGame(Async)");
        }
        
        // verify the required parameter 'player1HandId' is set
        if (player1HandId == null) {
            throw new ApiException("Missing the required parameter 'player1HandId' when calling continueGame(Async)");
        }
        
        // verify the required parameter 'player2HandId' is set
        if (player2HandId == null) {
            throw new ApiException("Missing the required parameter 'player2HandId' when calling continueGame(Async)");
        }
        

        com.squareup.okhttp.Call call = continueGameCall(id, player1HandId, player2HandId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Continue a game
     * Continue a game
     * @param id Id of the game (required)
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @return GameDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GameDTO continueGame(Integer id, Integer player1HandId, Integer player2HandId) throws ApiException {
        ApiResponse<GameDTO> resp = continueGameWithHttpInfo(id, player1HandId, player2HandId);
        return resp.getData();
    }

    /**
     * Continue a game
     * Continue a game
     * @param id Id of the game (required)
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @return ApiResponse&lt;GameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GameDTO> continueGameWithHttpInfo(Integer id, Integer player1HandId, Integer player2HandId) throws ApiException {
        com.squareup.okhttp.Call call = continueGameValidateBeforeCall(id, player1HandId, player2HandId, null, null);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Continue a game (asynchronously)
     * Continue a game
     * @param id Id of the game (required)
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call continueGameAsync(Integer id, Integer player1HandId, Integer player2HandId, final ApiCallback<GameDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = continueGameValidateBeforeCall(id, player1HandId, player2HandId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGame
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGameCall(Integer player1HandId, Integer player2HandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/game";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (player1HandId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("player1HandId", player1HandId));
        if (player2HandId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("player2HandId", player2HandId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGameValidateBeforeCall(Integer player1HandId, Integer player2HandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'player1HandId' is set
        if (player1HandId == null) {
            throw new ApiException("Missing the required parameter 'player1HandId' when calling createGame(Async)");
        }
        
        // verify the required parameter 'player2HandId' is set
        if (player2HandId == null) {
            throw new ApiException("Missing the required parameter 'player2HandId' when calling createGame(Async)");
        }
        

        com.squareup.okhttp.Call call = createGameCall(player1HandId, player2HandId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a game
     * Start a game
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @return GameDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GameDTO createGame(Integer player1HandId, Integer player2HandId) throws ApiException {
        ApiResponse<GameDTO> resp = createGameWithHttpInfo(player1HandId, player2HandId);
        return resp.getData();
    }

    /**
     * Start a game
     * Start a game
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @return ApiResponse&lt;GameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GameDTO> createGameWithHttpInfo(Integer player1HandId, Integer player2HandId) throws ApiException {
        com.squareup.okhttp.Call call = createGameValidateBeforeCall(player1HandId, player2HandId, null, null);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start a game (asynchronously)
     * Start a game
     * @param player1HandId id Hand (required)
     * @param player2HandId id Hand (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGameAsync(Integer player1HandId, Integer player2HandId, final ApiCallback<GameDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGameValidateBeforeCall(player1HandId, player2HandId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GameDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHandTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHandTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/game/catalogTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHandTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHandTypesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Catalog of types of hands
     * Catalog of types of hands
     * @return List&lt;HandTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HandTypeDTO> getHandTypes() throws ApiException {
        ApiResponse<List<HandTypeDTO>> resp = getHandTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Catalog of types of hands
     * Catalog of types of hands
     * @return ApiResponse&lt;List&lt;HandTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HandTypeDTO>> getHandTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHandTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<HandTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Catalog of types of hands (asynchronously)
     * Catalog of types of hands
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHandTypesAsync(final ApiCallback<List<HandTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHandTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HandTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
